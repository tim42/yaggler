
#version 450 core
#line 4

// // some mandatory K:LMB macros

// this file is using the 'framework'
#define KLMB_IS_USING_FRAMEWORK
// this file is a shader entry point
#define KLMB_IS_ENTRY_POINT

layout(quads, equal_spacing, ccw) in;

uniform mat4 vp_matrix;
uniform mat4 object_matrix;

out gl_PerVertex
{
  vec4 gl_Position;
};

out vec4 v_position;
out vec3 t_position;
patch in mat4 vpm_matrix[];

#define ID gl_InvocationID

uniform float global_time;

uniform sampler2D s_texture;
uniform vec2 grid_size;

// sample the distance field
float mapDF(vec3 pos)
{
//  return length(pos - vec3(0., 0., 0.)) - 5.;
  pos.y += 25.;
  vec3 p = vec3(pos.x * sin(global_time) - pos.y * cos(global_time), pos.x * cos(global_time) + pos.y * sin(global_time), pos.z);
  vec2 q = vec2(length(p.xz) - 5.5, p.y);
  return length(q) - 2.5;
}

// return the max distance
float raymarch(vec3 pos, vec3 dir)
{
  float d = 0;
  float acc = 0;
  for (int i = 0; i < 20; ++i)
  {
    d = mapDF(pos + acc * dir);
    if (abs(d) < 7.1 || abs(acc) > 125.) // no needs for a great precision !
      return acc;
    acc += (d) / 2.;
  }
  return acc;
}


// rounded cube from a grid
void KLMB_MAIN_FUNCTION()
{
  // point position
  vec2 tcoord = gl_TessCoord.xy;

  // tri pos
  vec3 pos = gl_in[0].gl_Position.xyz;
  pos.xz += tcoord;


  // height
  pos.y -= raymarch(pos, vec3(0., -1., 0.));

  // world / positions
  v_position = vpm_matrix[0] * vec4(pos, 1.);
  t_position = pos;
  gl_Position = v_position;
}
