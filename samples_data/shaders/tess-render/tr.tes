
#version 430 core
#line 4

// // some mandatory K:LMB macros

// this file is using the 'framework'
#define KLMB_IS_USING_FRAMEWORK
// this file is a shader entry point
#define KLMB_IS_ENTRY_POINT

layout(quads, equal_spacing, ccw) in;

uniform mat4 vp_matrix;
uniform mat4 object_matrix;

out gl_PerVertex
{
  vec4 gl_Position;
};

out vec4 v_position;
out vec3 t_position;
patch in mat4 vpm_matrix[];

#define ID gl_InvocationID

uniform float global_time;

uniform sampler2D s_texture;
uniform vec2 grid_size;

// rounded cube from a grid
void KLMB_MAIN_FUNCTION()
{
  // point position
  vec2 tcoord = gl_TessCoord.xy;

  tcoord = tcoord * 1.745 - 0.87;
  tcoord = tcoord * tcoord * tcoord * tcoord * tcoord + 0.5;
//   tcoord = tcoord * 1.6 - 0.8;
//   tcoord = tcoord * tcoord * tcoord + 0.5;

  // tri pos
  vec3 pos = gl_in[0].gl_Position.xyz;
  pos.xz += tcoord;

  // color & height
  vec2 uv = 1. - ((floor(pos.xz) + grid_size / 2.) / grid_size);
  vec4 color = texture(s_texture, uv);

  // height factor
  float tf = (abs(gl_TessCoord.x - 0.5)) * (abs(gl_TessCoord.y - 0.5));
  float f = clamp(tf, 0., 0.01) * 100. * dot(color.xyz, color.xyz) * 2.;
   // * (cos(cos(global_time) * 3.14 * (floor(pos.x) / 5.) + sin(global_time) * 3.14 * (floor(pos.z) / 5.)));

  // height
  pos.y += f + tf;// + (1. + cos(global_time / 170. * mod((floor(pos.x + grid_size.y) * floor(pos.z + grid_size.x)) * 10000., 483)) * 0.15);

  // world / positions
  v_position = vpm_matrix[0] * vec4(pos, 1.);
  t_position = pos;
  gl_Position = v_position;
}
